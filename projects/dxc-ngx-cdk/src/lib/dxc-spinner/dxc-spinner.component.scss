:host {
  display: inline-block;
  &.large {
    height: 140px;
    width: 140px;
  }
  &.small {
    height: 30px;
    width: 30px;
  }
  &.overlay {
    height: 100vh;
    width: 100vw;
    display: flex;
    position: fixed;
    top: 0;
    left: 0;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  .spinnerContainer {
    .backOverlay {
      width: 100vw;
      height: 100vh;
      opacity: 1;
      transition: opacity 225ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
      position: fixed;
      top: 0;
      left: 0;
    }
    height: inherit;
    width: inherit;
    position: relative;
    &.overlayed {
      width: 140px;
      height: 140px;
      .labelsContainer {
        p {
          &.label {
            text-align: var(--spinner-overlayLabelTextAlign);
            font-family: var(--spinner-overlayLabelFontFamily);
            font-size: var(--spinner-overlayLabelFontSize);
            font-weight: var(--spinner-overlayLabelFontWeight);
            font-style: var(--spinner-overlayLabelFontStyle);
            color: var(--spinner-overlayLabelFontColor);
            text-transform: var(--spinner-overlayLabelFontTextTransform);
            letter-spacing: var(--spinner-overlayLabelLetterSpacing);
          }
          &.value {
            text-align: var(--spinner-overlayProgressValueTextAlign);
            font-family: var(--spinner-overlayProgressValueFontFamily);
            font-size: var(--spinner-overlayProgressValueFontSize);
            font-weight: var(--spinner-overlayProgressValueFontWeight);
            font-style: var(--spinner-overlayProgressValueFontStyle);
            color: var(--spinner-overlayProgressValueFontColor);
            letter-spacing: var(--spinner-overlayProgressValueLetterSpacing);
          }
        }
      }
    }
    &.notOverlayed {
      height: auto;
      width: auto;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 1;
    }
    display: flex;
    align-items: center;
    justify-content: center;
    .mat-spinner,
    .mat-progress-spinner {
      ::ng-deep {
        width: inherit !important;
        height: inherit !important;
        svg {
          width: inherit !important;
          height: inherit !important;
        }
        circle {
          stroke-width: 6px !important;
        }
      }
    }
    &.smaller {
      .mat-spinner,
      .mat-progress-spinner {
        ::ng-deep {
          circle {
            stroke-width: 16px !important;
          }
        }
      }
    }
    .labelsContainer {
      position: absolute;
      margin: 0 auto;
      display: block;
      width: 110px;
      p {
        margin: 0;
        &.label,
        &.value {
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        &.label {
          text-align: var(--spinner-labelTextAlign);
          font-family: var(--spinner-labelFontFamily);
          font-size: var(--spinner-labelFontSize);
          font-weight: var(--spinner-labelFontWeight);
          font-style: var(--spinner-labelFontStyle);
          color: var(--spinner-labelFontColor);
          text-transform: var(--spinner-labelFontTextTransform);
          letter-spacing: var(--spinner-labelLetterSpacing);
        }
        &.value {
          text-align: var(--spinner-progressValueTextAlign);
          font-family: var(--spinner-progressValueFontFamily);
          font-size: var(--spinner-progressValueFontSize);
          font-weight: var(--spinner-progressValueFontWeight);
          font-style: var(--spinner-progressValueFontStyle);
          color: var(--spinner-progressValueFontColor);
          letter-spacing: var(--spinner-progressValueLetterSpacing);
        }
      }
    }
  }
  .mat-spinner,
  .mat-progress-spinner {
    ::ng-deep {
      position: absolute;
    }
  }
  .spinnerContainer {
    .backOverlay {
      background-color: var(--spinner-overlayBackgroundColor);
      opacity: var(--spinner-overlayOpacity);
    }
  }
  .mat-progress-spinner.backCircle {
    ::ng-deep {
      circle {
        stroke: var(--spinner-totalCircleColor);
      }
    }
  }
  .mat-spinner.spinner,
  .mat-progress-spinner.spinner {
    ::ng-deep {
      circle {
        stroke: var(--spinner-trackCircleColor);
      }
    }
  }
}
